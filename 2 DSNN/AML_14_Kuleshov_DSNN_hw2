{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.4"},"colab":{"name":"AML_14_Kuleshov_DSNN_hw2","provenance":[{"file_id":"1y2vX9lOI1KaMyOJbGegKs5QwVrkBRso5","timestamp":1620903308145},{"file_id":"https://github.com/waytobehigh/nlp_course/blob/master/week05_structured/rnn_tagger.ipynb","timestamp":1617022812789}],"collapsed_sections":["RhiWdaH_5lWK"],"toc_visible":true},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"7u8fiyzYd00O"},"source":["**AML-14. Кулешов Иван.**\n","\n","Домашнее задание по теме \"Введение в рекуррентные НС\""]},{"cell_type":"markdown","metadata":{"collapsed":true,"id":"l4VAzKlG8aHj"},"source":["## Neural Part Of Speech Tagging\n","\n","We're now going to solve the same problem of POS tagging with neural networks.\n","<img src=https://i.stack.imgur.com/6pdIT.png width=320>\n","\n","From deep learning perspective, this is a task of predicting a sequence of outputs aligned to a sequence of inputs. There are several problems that match this formulation:\n","* Part Of Speech Tagging -  an auxuliary task for many NLP problems\n","* Named Entity Recognition - for chat bots and web crawlers\n","* Protein structure prediction - for bioinformatics"]},{"cell_type":"code","metadata":{"id":"wnu9D3YZoH2e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621104290389,"user_tz":-420,"elapsed":5546,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"149bb40b-31cd-4da8-b1be-9237d92dcb20"},"source":["%tensorflow_version 1.x\n","import tensorflow as tf"],"execution_count":8,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"scrolled":true,"id":"yxFUBtb88aHq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621104300347,"user_tz":-420,"elapsed":6515,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"4df9ac8d-80d5-4fc4-f20b-56064b20f67b"},"source":["import nltk\n","import sys\n","import numpy as np\n","\n","nltk.download('brown')\n","nltk.download('universal_tagset')\n","data = nltk.corpus.brown.tagged_sents(tagset='universal')\n","all_tags = ['#EOS#','#UNK#','ADV', 'NOUN', 'ADP', 'PRON', 'DET', '.', 'PRT', 'VERB', 'X', 'NUM', 'CONJ', 'ADJ']\n","\n","data = np.array([ [(word.lower(),tag) for word,tag in sentence] for sentence in data ])"],"execution_count":9,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package brown to /root/nltk_data...\n","[nltk_data]   Package brown is already up-to-date!\n","[nltk_data] Downloading package universal_tagset to /root/nltk_data...\n","[nltk_data]   Package universal_tagset is already up-to-date!\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  # Remove the CWD from sys.path while we load stuff.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Bq_OXuD38aHs","executionInfo":{"status":"ok","timestamp":1621104307448,"user_tz":-420,"elapsed":938,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["from sklearn.model_selection import train_test_split\n","train_data, test_data = train_test_split(data,test_size=0.25,random_state=42)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"sAlXrDmU8aHs","colab":{"base_uri":"https://localhost:8080/","height":155},"executionInfo":{"status":"ok","timestamp":1621104311441,"user_tz":-420,"elapsed":944,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"b2639895-b655-41d7-dfa2-90c54030d0e4"},"source":["from IPython.display import HTML, display\n","def draw(sentence):\n","    words,tags = zip(*sentence)\n","    display(HTML('<table><tr>{tags}</tr>{words}<tr></table>'.format(\n","                words = '<td>{}</td>'.format('</td><td>'.join(words)),\n","                tags = '<td>{}</td>'.format('</td><td>'.join(tags)))))\n","    \n","    \n","draw(data[11])\n","draw(data[10])\n","draw(data[7])"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/html":["<table><tr><td>NOUN</td><td>ADP</td><td>NOUN</td><td>NOUN</td><td>NOUN</td><td>NOUN</td><td>VERB</td><td>ADV</td><td>VERB</td><td>ADP</td><td>DET</td><td>ADJ</td><td>NOUN</td><td>.</td></tr><td>implementation</td><td>of</td><td>georgia's</td><td>automobile</td><td>title</td><td>law</td><td>was</td><td>also</td><td>recommended</td><td>by</td><td>the</td><td>outgoing</td><td>jury</td><td>.</td><tr></table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<table><tr><td>PRON</td><td>VERB</td><td>ADP</td><td>DET</td><td>NOUN</td><td>.</td><td>VERB</td><td>NOUN</td><td>PRT</td><td>VERB</td><td>.</td><td>DET</td><td>NOUN</td><td>.</td></tr><td>it</td><td>urged</td><td>that</td><td>the</td><td>city</td><td>``</td><td>take</td><td>steps</td><td>to</td><td>remedy</td><td>''</td><td>this</td><td>problem</td><td>.</td><tr></table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<table><tr><td>NOUN</td><td>VERB</td></tr><td>merger</td><td>proposed</td><tr></table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"LAViiL2C8aHt"},"source":["### Building vocabularies\n","\n","Just like before, we have to build a mapping from tokens to integer ids. This time around, our model operates on a word level, processing one word per RNN step. This means we'll have to deal with far larger vocabulary.\n","\n","Luckily for us, we only receive those words as input i.e. we don't have to predict them. This means we can have a large vocabulary for free by using word embeddings."]},{"cell_type":"markdown","metadata":{"id":"V6jx-XLXntuQ"},"source":["### Создание словарей\n","\n","Как и раньше, нам нужно построить сопоставление токенов с целочисленными идентификаторами. На этот раз наша модель работает на уровне слов, обрабатывая одно слово за шаг RNN. Это означает, что нам придется иметь дело с гораздо большим словарным запасом.\n","\n","К счастью для нас, мы получаем только эти слова в качестве входных данных, т.е. нам не нужно их предсказывать. Это означает, что мы можем бесплатно иметь большой словарный запас, используя вложения слов."]},{"cell_type":"code","metadata":{"collapsed":true,"id":"ZXK_k-mo8aHt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621104317788,"user_tz":-420,"elapsed":1542,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"0db81416-01aa-4c1f-daec-9576610ddede"},"source":["from collections import Counter\n","word_counts = Counter()\n","for sentence in data:\n","    words,tags = zip(*sentence)\n","    word_counts.update(words)\n","\n","all_words = ['#EOS#','#UNK#'] + list(list(zip(*word_counts.most_common(10000)))[0])\n","\n","#let's measure what fraction of data words are in the dictionary\n","print(\"Coverage = %.5f\" % (float(sum(word_counts[w] for w in all_words)) / sum(word_counts.values())))"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Coverage = 0.92876\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"collapsed":true,"id":"T0hee8L88aHt","executionInfo":{"status":"ok","timestamp":1621104321826,"user_tz":-420,"elapsed":942,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["from collections import defaultdict\n","word_to_id = defaultdict(lambda:1, { word: i for i, word in enumerate(all_words) })\n","tag_to_id = { tag: i for i, tag in enumerate(all_tags)}"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RCmGbwpP8aHu"},"source":["convert words and tags into fixed-size matrix"]},{"cell_type":"code","metadata":{"collapsed":true,"id":"X7kx6jWn8aHu","executionInfo":{"status":"ok","timestamp":1621104325148,"user_tz":-420,"elapsed":930,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["def to_matrix(lines, token_to_id, max_len=None, pad=0, dtype='int32', time_major=False):\n","    \"\"\"Converts a list of names into rnn-digestable matrix with paddings added after the end\"\"\"\n","    \n","    max_len = max_len or max(map(len,lines))\n","    matrix = np.empty([len(lines), max_len],dtype)\n","    matrix.fill(pad)\n","\n","    for i in range(len(lines)):\n","        line_ix = list(map(token_to_id.__getitem__,lines[i]))[:max_len]\n","        matrix[i,:len(line_ix)] = line_ix\n","\n","    return matrix.T if time_major else matrix\n","\n"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"collapsed":true,"id":"BCaE-i5u8aHu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621104328311,"user_tz":-420,"elapsed":1019,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"56ae2fc2-92db-4e6a-8329-97435b961464"},"source":["batch_words, batch_tags = zip(*[zip(*sentence) for sentence in data[-3:]])\n","\n","print(\"Word ids:\")\n","print(to_matrix(batch_words, word_to_id))\n","print(\"Tag ids:\")\n","print(to_matrix(batch_tags, tag_to_id))"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Word ids:\n","[[   2 3057    5    2 2238 1334 4238 2454    3    6   19   26 1070   69\n","     8 2088    6    3    1    3  266   65  342    2    1    3    2  315\n","     1    9   87  216 3322   69 1558    4    0    0    0    0    0    0\n","     0    0    0    0    0    0    0    0    0    0    0]\n"," [  45   12    8  511 8419    6   60 3246   39    2    1    1    3    2\n","   845    1    3    1    3   10 9910    2    1 3470    9   43    1    1\n","     3    6    2 1046  385   73 4562    3    9    2    1    1 3250    3\n","    12   10    2  861 5240   12    8 8936  121    1    4]\n"," [  33   64   26   12  445    7 7346    9    8 3337    3    1 2811    3\n","     2  463  572    2    1    1 1649   12    1    4    0    0    0    0\n","     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","     0    0    0    0    0    0    0    0    0    0    0]]\n","Tag ids:\n","[[ 6  3  4  6  3  3  9  9  7 12  4  5  9  4  6  3 12  7  9  7  9  8  4  6\n","   3  7  6 13  3  4  6  3  9  4  3  7  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0]\n"," [ 5  9  6  9  3 12  6  3  7  6 13  3  7  6 13  3  7 13  7  5  9  6  3  3\n","   4  6 13  3  7 12  6  3  6 13  3  7  4  6  3  9  3  7  9  4  6 13  3  9\n","   6  3  2 13  7]\n"," [ 4  6  5  9 13  4  3  4  6 13  7 13  3  7  6  3  4  6 13  3  3  9  9  7\n","   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"collapsed":true,"id":"_oK_i5Xa8aHv"},"source":["### Build model\n","\n","Unlike our previous lab, this time we'll focus on a high-level keras interface to recurrent neural networks. It is as simple as you can get with RNN, allbeit somewhat constraining for complex tasks like seq2seq.\n","\n","By default, all keras RNNs apply to a whole sequence of inputs and produce a sequence of hidden states `(return_sequences=True` or just the last hidden state `(return_sequences=False)`. All the recurrence is happening under the hood.\n","\n","At the top of our model we need to apply a Dense layer to each time-step independently. As of now, by default keras.layers.Dense would apply once to all time-steps concatenated. We use __keras.layers.TimeDistributed__ to modify Dense layer so that it would apply across both batch and time axes."]},{"cell_type":"markdown","metadata":{"id":"hvAazwo1wcjd"},"source":["### Построить модель\n","\n","В отличие от нашей предыдущей лабораторной работы, на этот раз мы сосредоточимся на высокоуровневом интерфейсе keras для повторяющихся нейронных сетей. Это настолько просто, насколько вы можете получить с RNN, хотя и несколько ограничивает сложные задачи, такие как seq2seq.\n","\n","По умолчанию все keras RNN применяются ко всей последовательности входных данных и создают последовательность скрытых состояний `(return_sequences = True` или только последнее скрытое состояние` (return_sequences = False) `. Все повторения происходят под капотом.\n","\n","В верхней части нашей модели нам нужно применить плотный слой к каждому временному шагу независимо. На данный момент по умолчанию keras.layers.Dense будет применяться один раз ко всем объединенным временным шагам. Мы используем __keras.layers.TimeDistributed__ для изменения слоя Dense, чтобы он применялся как для пакетной, так и для временной осей."]},{"cell_type":"code","metadata":{"id":"OQeb8d5j8aHv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621104382363,"user_tz":-420,"elapsed":942,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"c2ca7fa8-0c58-4cb8-993d-a3b22498e4c2"},"source":["import keras\n","import keras.layers as L\n","\n","model = keras.models.Sequential()\n","model.add(L.InputLayer([None],dtype='int32'))\n","model.add(L.Embedding(len(all_words),50))\n","model.add(L.SimpleRNN(64,return_sequences=True))\n","\n","#add top layer that predicts tag probabilities\n","stepwise_dense = L.Dense(len(all_tags),activation='softmax')\n","stepwise_dense = L.TimeDistributed(stepwise_dense)\n","model.add(stepwise_dense)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"obRVUqOrx5ff","executionInfo":{"status":"ok","timestamp":1621094816720,"user_tz":-420,"elapsed":979,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"c7e311d4-e4b7-4266-d2e8-7ec9dc83eeaf"},"source":["model.summary()"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, None, 50)          500100    \n","_________________________________________________________________\n","simple_rnn_1 (SimpleRNN)     (None, None, 64)          7360      \n","_________________________________________________________________\n","time_distributed_1 (TimeDist (None, None, 14)          910       \n","=================================================================\n","Total params: 508,370\n","Trainable params: 508,370\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lQbJqM2n8aHv"},"source":["__Training:__ in this case we don't want to prepare the whole training dataset in advance. The main cause is that the length of every batch depends on the maximum sentence length within the batch. This leaves us two options: use custom training code as in previous seminar or use generators.\n","\n","Keras models have a __`model.fit_generator`__ method that accepts a python generator yielding one batch at a time. But first we need to implement such generator:"]},{"cell_type":"markdown","metadata":{"id":"4onDovJFyawY"},"source":["__Training: __ в этом случае мы не хотим заранее готовить весь набор обучающих данных. Основная причина заключается в том, что длина каждого пакета зависит от максимальной длины предложения в пакете. Это оставляет нам два варианта: использовать специальный обучающий код, как на предыдущем семинаре, или использовать генераторы.\n","\n","В моделях Keras есть метод __`model.fit_generator`__, который принимает генератор Python, выдающий по одной партии за раз. Но для начала нам нужно реализовать такой генератор:"]},{"cell_type":"code","metadata":{"collapsed":true,"id":"kpeMsDi18aHw","executionInfo":{"status":"ok","timestamp":1621104389120,"user_tz":-420,"elapsed":984,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["from keras.utils.np_utils import to_categorical\n","BATCH_SIZE=32\n","def generate_batches(sentences,batch_size=BATCH_SIZE,max_len=None,pad=0):\n","    assert isinstance(sentences,np.ndarray),\"Make sure sentences is q numpy array\"\n","    \n","    while True:\n","        indices = np.random.permutation(np.arange(len(sentences)))\n","        for start in range(0,len(indices)-1,batch_size):\n","            batch_indices = indices[start:start+batch_size]\n","            batch_words,batch_tags = [],[]\n","            for sent in sentences[batch_indices]:\n","                words,tags = zip(*sent)\n","                batch_words.append(words)\n","                batch_tags.append(tags)\n","\n","            batch_words = to_matrix(batch_words,word_to_id,max_len,pad)\n","            batch_tags = to_matrix(batch_tags,tag_to_id,max_len,pad)\n","\n","            batch_tags_1hot = to_categorical(batch_tags,len(all_tags)).reshape(batch_tags.shape+(-1,))\n","            yield batch_words,batch_tags_1hot\n","        "],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zYoR9vgn8aHw"},"source":["__Callbacks:__ Another thing we need is to measure model performance. The tricky part is not to count accuracy after sentence ends (on padding) and making sure we count all the validation data exactly once.\n","\n","While it isn't impossible to persuade Keras to do all of that, we may as well write our own callback that does that.\n","Keras callbacks allow you to write a custom code to be ran once every epoch or every minibatch. We'll define one via LambdaCallback"]},{"cell_type":"markdown","metadata":{"id":"SQecOx3mz0AZ"},"source":["__ Обратные вызовы: __ Еще нам нужно измерить производительность модели. Сложность состоит в том, чтобы не подсчитывать точность после окончания предложения (при заполнении) и не просчитывать все проверочные данные ровно один раз.\n","\n","Хотя убедить Кераса сделать все это не невозможно, мы также можем написать собственный обратный вызов, который сделает это.\n","Обратные вызовы Keras позволяют вам написать собственный код, который будет запускаться один раз в каждую эпоху или каждый мини-пакет. Мы определим один через LambdaCallback"]},{"cell_type":"code","metadata":{"collapsed":true,"id":"CC8woNtV8aHx","executionInfo":{"status":"ok","timestamp":1621104394948,"user_tz":-420,"elapsed":922,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["def compute_test_accuracy(model):\n","    test_words,test_tags = zip(*[zip(*sentence) for sentence in test_data])\n","    test_words,test_tags = to_matrix(test_words,word_to_id),to_matrix(test_tags,tag_to_id)\n","\n","    #predict tag probabilities of shape [batch,time,n_tags]\n","    predicted_tag_probabilities = model.predict(test_words,verbose=1)\n","    predicted_tags = predicted_tag_probabilities.argmax(axis=-1)\n","\n","    #compute accurary excluding padding\n","    numerator = np.sum(np.logical_and((predicted_tags == test_tags),(test_words != 0)))\n","    denominator = np.sum(test_words != 0)\n","    return float(numerator)/denominator\n","\n","\n","class EvaluateAccuracy(keras.callbacks.Callback):\n","    def on_epoch_end(self,epoch,logs=None):\n","        sys.stdout.flush()\n","        print(\"\\nMeasuring validation accuracy...\")\n","        acc = compute_test_accuracy(self.model)\n","        print(\"\\nValidation accuracy: %.5f\\n\"%acc)\n","        sys.stdout.flush()\n","        "],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"collapsed":true,"id":"5eJGEWu58aHx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621095866408,"user_tz":-420,"elapsed":227699,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"7717175b-1758-4d63-f267-71c088e2ece5"},"source":["model.compile('adam','categorical_crossentropy')\n","\n","model.fit_generator(generate_batches(train_data),len(train_data)/BATCH_SIZE,\n","                    callbacks=[EvaluateAccuracy()], epochs=5,)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/tensorflow_core/python/ops/math_grad.py:1424: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","Epoch 1/5\n","1344/1343 [==============================] - 39s 29ms/step - loss: 0.2732\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 6s 412us/step\n","\n","Validation accuracy: 0.94089\n","\n","Epoch 2/5\n","1344/1343 [==============================] - 37s 27ms/step - loss: 0.0585\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 6s 416us/step\n","\n","Validation accuracy: 0.94463\n","\n","Epoch 3/5\n","1344/1343 [==============================] - 37s 27ms/step - loss: 0.0519\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 6s 410us/step\n","\n","Validation accuracy: 0.94474\n","\n","Epoch 4/5\n","1344/1343 [==============================] - 36s 26ms/step - loss: 0.0477\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 6s 403us/step\n","\n","Validation accuracy: 0.94541\n","\n","Epoch 5/5\n","1344/1343 [==============================] - 36s 27ms/step - loss: 0.0436\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 6s 430us/step\n","\n","Validation accuracy: 0.94527\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.callbacks.History at 0x7f790b479750>"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"TTN7C34V8aHy"},"source":["Measure final accuracy on the whole test set."]},{"cell_type":"code","metadata":{"collapsed":true,"id":"tHgxnYB68aHy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621095963328,"user_tz":-420,"elapsed":8072,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"6f6e6436-e272-427b-c48a-72b9d8a3fdd9"},"source":["acc = compute_test_accuracy(model)\n","print(\"Final accuracy: %.5f\"%acc)\n","\n","assert acc>0.94, \"Keras has gone on a rampage again, please contact course staff.\""],"execution_count":34,"outputs":[{"output_type":"stream","text":["14335/14335 [==============================] - 6s 440us/step\n","Final accuracy: 0.94527\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5L5Prr4I8aHy"},"source":["### Going bidirectional\n","\n","Since we're analyzing a full sequence, it's legal for us to look into future data.\n","\n","A simple way to achieve that is to go both directions at once, making a __bidirectional RNN__.\n","\n","In Keras you can achieve that both manually (using two LSTMs and Concatenate) and by using __`keras.layers.Bidirectional`__. \n","\n","This one works just as `TimeDistributed` we saw before: you wrap it around a recurrent layer (SimpleRNN now and LSTM/GRU later) and it actually creates two layers under the hood.\n","\n","Your first task is to use such a layer our POS-tagger."]},{"cell_type":"markdown","metadata":{"id":"-zQ3-BBo2jqw"},"source":["### Двунаправленный\n","\n","Поскольку мы анализируем полную последовательность, нам разрешено заглядывать в будущие данные.\n","\n","Простой способ добиться этого - пойти в обоих направлениях одновременно, создав __bidirectional RNN__.\n","\n","В Keras вы можете добиться этого как вручную (используя два LSTM и Concatenate), так и используя __`keras.layers.Bidirectional`__.\n","\n","Он работает так же, как TimeDistributed, который мы видели раньше: вы обертываете его вокруг повторяющегося слоя (SimpleRNN сейчас и LSTM / GRU позже), и он фактически создает два слоя под капотом.\n","\n","Ваша первая задача - использовать такой слой в нашем POS-tagger."]},{"cell_type":"markdown","metadata":{"id":"Tqv5vmEde9Eu"},"source":["***\n","\n","> Решение\n","\n","---\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"tHq0HlTv9DsS","executionInfo":{"status":"ok","timestamp":1621097730896,"user_tz":-420,"elapsed":951,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["del model"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"collapsed":true,"id":"xWfCrbh-8aHy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621097733490,"user_tz":-420,"elapsed":994,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"77c4e253-1980-4fbb-9e7b-89335fc7fa24"},"source":["#Define a model that utilizes bidirectional SimpleRNN\n","model = keras.models.Sequential()\n","\n","model.add(L.InputLayer([None],dtype='int32'))\n","model.add(L.Embedding(len(all_words),50))\n","model.add(L.Bidirectional(L.SimpleRNN(64, return_sequences=True)))\n","\n","#add top layer that predicts tag probabilities\n","stepwise_dense = L.Dense(len(all_tags),activation='softmax')\n","stepwise_dense = L.TimeDistributed(stepwise_dense)\n","model.add(stepwise_dense)\n","\n","model.summary()"],"execution_count":37,"outputs":[{"output_type":"stream","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_3 (Embedding)      (None, None, 50)          500100    \n","_________________________________________________________________\n","bidirectional_2 (Bidirection (None, None, 128)         14720     \n","_________________________________________________________________\n","time_distributed_3 (TimeDist (None, None, 14)          1806      \n","=================================================================\n","Total params: 516,626\n","Trainable params: 516,626\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"collapsed":true,"id":"Ort64W348aHz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621098132315,"user_tz":-420,"elapsed":393223,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"51388ee9-9c05-42f2-e6f9-6ec7a25c3baf"},"source":["model.compile('adam','categorical_crossentropy')\n","\n","model.fit_generator(generate_batches(train_data),len(train_data)/BATCH_SIZE,\n","                    callbacks=[EvaluateAccuracy()], epochs=5,)"],"execution_count":38,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","1344/1343 [==============================] - 66s 49ms/step - loss: 0.1928\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 11s 780us/step\n","\n","Validation accuracy: 0.95636\n","\n","Epoch 2/5\n","1344/1343 [==============================] - 66s 49ms/step - loss: 0.0426\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 11s 774us/step\n","\n","Validation accuracy: 0.96034\n","\n","Epoch 3/5\n","1344/1343 [==============================] - 67s 50ms/step - loss: 0.0352\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 11s 768us/step\n","\n","Validation accuracy: 0.96213\n","\n","Epoch 4/5\n","1344/1343 [==============================] - 66s 49ms/step - loss: 0.0302\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 11s 761us/step\n","\n","Validation accuracy: 0.96266\n","\n","Epoch 5/5\n","1344/1343 [==============================] - 66s 49ms/step - loss: 0.0256\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 11s 766us/step\n","\n","Validation accuracy: 0.96234\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.callbacks.History at 0x7f78a7ce9b90>"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"collapsed":true,"id":"iWHSkF648aHz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621098163692,"user_tz":-420,"elapsed":12543,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"6821c6a0-eb38-436a-c643-31daf183af66"},"source":["acc = compute_test_accuracy(model)\n","print(\"\\nFinal accuracy: %.5f\"%acc)\n","\n","assert acc>0.96, \"Bidirectional RNNs are better than this!\"\n","print(\"Well done!\")"],"execution_count":39,"outputs":[{"output_type":"stream","text":["14335/14335 [==============================] - 11s 753us/step\n","\n","Final accuracy: 0.96234\n","Well done!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DM3K7pQv_Vi9"},"source":["**Вывод:**\n","Использование bidirectional RNN значительно улучшило результат работы нейросети."]},{"cell_type":"markdown","metadata":{"id":"VW_nFppS8aH0"},"source":["Task I: Structured loss functions (more bonus points)\n","\n","Since we're tagging the whole sequence at once, we might as well train our network to do so. Remember linear CRF from the lecture? You can also use it as a loss function for your RNN\n","\n","\n","  * There's more than one way to do so, but we'd recommend starting with [Conditional Random Fields](http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/)\n","  * You can plug CRF as a loss function and still train by backprop. There's even some neat tensorflow [implementation](https://www.tensorflow.org/api_guides/python/contrib.crf) for you.\n","  * Alternatively, you can condition your model on previous tags (make it autoregressive) and perform __beam search__ over that model."]},{"cell_type":"markdown","metadata":{"id":"RMxCJRTw4q5X"},"source":["Задача I: Структурированные функции потерь (больше бонусных баллов)\n","\n","Поскольку мы маркируем сразу всю последовательность, мы могли бы также обучить нашу сеть этому. Помните линейный CRF из лекции? Вы также можете использовать его как функцию потерь для своей RNN.\n","\n","\n","  * Есть несколько способов сделать это, но мы рекомендуем начать с [Условные случайные поля] (http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/)\n","  * Вы можете подключить CRF как функцию потерь и по-прежнему тренироваться по обратному каналу. Есть даже интересная [реализация] тензорного потока (https://www.tensorflow.org/api_guides/python/contrib.crf) для вас.\n","  * В качестве альтернативы вы можете обусловить свою модель предыдущими тегами (сделать ее авторегрессивной) и выполнить поиск __beam__ по этой модели."]},{"cell_type":"code","metadata":{"id":"uXEj1Nm98aH0"},"source":["<YOUR CODE>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AG_wuMVf8aH0"},"source":["\n","#### Some tips\n","Here there are a few more tips on how to improve training that are a bit trickier to impliment. We strongly suggest that you try them _after_ you've got a good initial model.\n","* __Use pre-trained embeddings__: you can use pre-trained weights from [there](http://ahogrammer.com/2017/01/20/the-list-of-pretrained-word-embeddings/) to kickstart your Embedding layer.\n","  * Embedding layer has a matrix W (layer.W) which contains word embeddings for each word in the dictionary. You can just overwrite them with tf.assign.\n","  * When using pre-trained embeddings, pay attention to the fact that model's dictionary is different from your own.\n","  * You may want to switch trainable=False for embedding layer in first few epochs as in regular fine-tuning.  \n","* __Go beyond SimpleRNN__: there's `keras.layers.LSTM` and `keras.layers.GRU`\n","  * If you want to use a custom recurrent Cell, read [this](https://keras.io/layers/recurrent/#rnn)\n","  * You can also use 1D Convolutions (`keras.layers.Conv1D`). They are often as good as recurrent layers but with less overfitting.\n","* __Stack more layers__: if there is a common motif to this course it's about stacking layers\n","  * You can just add recurrent and 1dconv layers on top of one another and keras will understand it\n","  * Just remember that bigger networks may need more epochs to train\n","* __Regularization__: you can apply dropouts as usual but also in an RNN-specific way\n","  * `keras.layers.Dropout` works inbetween RNN layers\n","  * Recurrent layers also have `recurrent_dropout` parameter\n","* __Gradient clipping__: If your training isn't as stable as you'd like, set `clipnorm` in your optimizer.\n","  * Which is to say, it's a good idea to watch over your loss curve at each minibatch. Try tensorboard callback or something similar.\n","* __Word Dropout__: tl;dr randomly replace words with UNK during training. \n","  * This can also simulate increased amount of unknown words in the test set\n","* __Larger vocabulary__: You can obtain greater performance by expanding your model's input dictionary from 5000 to up to every single word!\n","  * Just make sure your model doesn't overfit due to so many parameters.\n","  * Combined with regularizers or pre-trained word-vectors this could be really good cuz right now our model is blind to >5% of words.  \n","* __More efficient batching__: right now TF spends a lot of time iterating over \"0\"s\n","  * This happens because batch is always padded to the length of a longest sentence\n","  * You can speed things up by pre-generating batches of similar lengths and feeding it with randomly chosen pre-generated batch.\n","  * This technically breaks the i.i.d. assumption, but it works unless you come up with some insane rnn architectures.\n","* __The most important advice__: don't cram in everything at once!\n","  * If you stuff in a lot of modiffications, some of them almost inevitably gonna be detrimental and you'll never know which of them are.\n","  * Try to instead go in small iterations and record experiment results to guide further search.\n","    \n","Good hunting!"]},{"cell_type":"markdown","metadata":{"id":"emx3lRKVFvDI"},"source":["***\n","\n","> Решение\n","\n","---\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"52zVZervF31n"},"source":["Попробую улучшить модель, применяя те или иные приёмы, после каждого оценивая точность модели.—"]},{"cell_type":"markdown","metadata":{"id":"aR6N3N8VHyPp"},"source":["**1. Предварительно обученные Embeddings**"]},{"cell_type":"code","metadata":{"id":"mgUBdjtGSC1b"},"source":["import os\n","import gzip\n","import shutil\n","!wget \"https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz\"\n","with gzip.open('GoogleNews-vectors-negative300.bin.gz', 'rb') as f_in:\n","  with open('GoogleNews-vectors-negative300.bin', 'wb') as f_out:\n","    shutil.copyfileobj(f_in, f_out)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JNcnDQawH86K","executionInfo":{"status":"ok","timestamp":1621104270781,"user_tz":-420,"elapsed":77501,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["from gensim.models import KeyedVectors\n","word2vec = KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True)"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JLmJ5zoIamwo"},"source":["Так как размер Эмбеддинга word2vec - 300, имеет смысл пересчитать последнюю модель, выставив такой же размер вместо прошлого равного 50, чтобы оценить, какое влияние окажет на модель использование предобученного вектора весов из word2vec."]},{"cell_type":"code","metadata":{"id":"KIDKSb4YDFTy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621105404140,"user_tz":-420,"elapsed":435242,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"b6bdfb34-c207-43e0-e5be-6594041ddd31"},"source":["model = keras.models.Sequential()\n","model.add(L.InputLayer([None],dtype='int32'))\n","model.add(L.Embedding(len(all_words),300))\n","model.add(L.Bidirectional(L.SimpleRNN(64, return_sequences=True)))\n","model.add(L.TimeDistributed(L.Dense(len(all_tags),activation='softmax')))\n","\n","model.compile('adam','categorical_crossentropy')\n","model.fit_generator(generate_batches(train_data),len(train_data)/BATCH_SIZE,\n","                    callbacks=[EvaluateAccuracy()], epochs=5,)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","1344/1343 [==============================] - 72s 53ms/step - loss: 0.1188\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 1ms/step\n","\n","Validation accuracy: 0.95984\n","\n","Epoch 2/5\n","1344/1343 [==============================] - 71s 53ms/step - loss: 0.0366\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 1ms/step\n","\n","Validation accuracy: 0.96318\n","\n","Epoch 3/5\n","1344/1343 [==============================] - 72s 54ms/step - loss: 0.0280\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 1ms/step\n","\n","Validation accuracy: 0.96399\n","\n","Epoch 4/5\n","1344/1343 [==============================] - 71s 53ms/step - loss: 0.0212\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 1ms/step\n","\n","Validation accuracy: 0.96217\n","\n","Epoch 5/5\n","1344/1343 [==============================] - 71s 53ms/step - loss: 0.0152\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 1ms/step\n","\n","Validation accuracy: 0.96076\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.callbacks.History at 0x7fce953ad9d0>"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"C0gGjAwibSrg"},"source":["Вывод:\n","Можно заметить, что обучение с Embedding_size = 300 поначалу велось с большей точностью, чем в предыдущей модели, где размер эмбеддинга был 50, однако после 5 эпох итоговая точность оказалась ниже.\n","\n","Воспользуемся предобученными данными и загрузим в нашу модель веса предобученных данных, и посмотрим улучшится ли модель.—"]},{"cell_type":"code","metadata":{"id":"-gCFYwxXcCdF","executionInfo":{"status":"ok","timestamp":1621105888590,"user_tz":-420,"elapsed":996,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["embedding_weights = np.zeros((len(all_words), 300))\n","\n","for index,word in enumerate(all_words):\n","    try:\n","        embedding_weights[index, :] = word2vec[word]\n","    except KeyError:\n","        pass"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mnHeQr2Ag5ti"},"source":["Строим модель с учетом предобученных весов"]},{"cell_type":"code","metadata":{"id":"prPGiXYvh83D","executionInfo":{"status":"ok","timestamp":1621107402127,"user_tz":-420,"elapsed":960,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["del model"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xOtcQ2AxhAzs","executionInfo":{"status":"ok","timestamp":1621107849965,"user_tz":-420,"elapsed":437195,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"39b6965f-6ce0-428b-90ac-0a10cd7b5e21"},"source":["model = keras.models.Sequential()\n","model.add(L.InputLayer([None],dtype='int32'))\n","model.add(L.Embedding(input_dim = len(all_words),\n","                      output_dim = 300,\n","                      weights = [embedding_weights],\n","                      trainable = True))\n","model.add(L.Bidirectional(L.SimpleRNN(64, return_sequences=True)))\n","model.add(L.TimeDistributed(L.Dense(len(all_tags),activation='softmax')))\n","\n","model.compile('adam','categorical_crossentropy')\n","model.fit_generator(generate_batches(train_data),len(train_data)/BATCH_SIZE,\n","                    callbacks=[EvaluateAccuracy()], epochs=5,)"],"execution_count":40,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","1344/1343 [==============================] - 73s 54ms/step - loss: 0.0998\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 15s 1ms/step\n","\n","Validation accuracy: 0.96177\n","\n","Epoch 2/5\n","1344/1343 [==============================] - 72s 53ms/step - loss: 0.0351\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 1ms/step\n","\n","Validation accuracy: 0.96474\n","\n","Epoch 3/5\n","1344/1343 [==============================] - 71s 53ms/step - loss: 0.0280\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 998us/step\n","\n","Validation accuracy: 0.96520\n","\n","Epoch 4/5\n","1344/1343 [==============================] - 72s 54ms/step - loss: 0.0219\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 1ms/step\n","\n","Validation accuracy: 0.96444\n","\n","Epoch 5/5\n","1344/1343 [==============================] - 70s 52ms/step - loss: 0.0168\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 14s 998us/step\n","\n","Validation accuracy: 0.96360\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.callbacks.History at 0x7fce94c4c6d0>"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"_BqOCeHhj6Q3"},"source":["**Вывод:**\n","Ожидания подтвердились: точность модели действительно улучшилась при использовании предобученных эмбеддингов."]},{"cell_type":"markdown","metadata":{"id":"pdH8nazekKD3"},"source":["**2. Теперь вместо SimpleRNN воспользуемся слоем LSTM и посмотрим, улучшится ли точность.—**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Jt7pinbn5uX","executionInfo":{"status":"ok","timestamp":1621114638584,"user_tz":-420,"elapsed":1500189,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"0d5ba8fd-a839-4f77-95fb-f71861378577"},"source":["model = keras.models.Sequential()\n","model.add(L.InputLayer([None],dtype='int32'))\n","model.add(L.Embedding(input_dim = len(all_words),\n","                      output_dim = 300,\n","                      weights = [embedding_weights],\n","                      trainable = True))\n","model.add(L.Bidirectional(L.LSTM(64, return_sequences=True)))\n","model.add(L.TimeDistributed(L.Dense(len(all_tags),activation='softmax')))\n","\n","model.compile('adam','categorical_crossentropy')\n","model.fit_generator(generate_batches(train_data),len(train_data)/BATCH_SIZE,\n","                    callbacks=[EvaluateAccuracy()], epochs=10,)"],"execution_count":60,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","1344/1343 [==============================] - 125s 93ms/step - loss: 0.1252\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96223\n","\n","Epoch 2/10\n","1344/1343 [==============================] - 122s 91ms/step - loss: 0.0354\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96668\n","\n","Epoch 3/10\n","1344/1343 [==============================] - 122s 91ms/step - loss: 0.0287\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96794\n","\n","Epoch 4/10\n","1344/1343 [==============================] - 122s 91ms/step - loss: 0.0237\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96767\n","\n","Epoch 5/10\n","1344/1343 [==============================] - 122s 91ms/step - loss: 0.0195\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96687\n","\n","Epoch 6/10\n","1344/1343 [==============================] - 122s 91ms/step - loss: 0.0154\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96490\n","\n","Epoch 7/10\n","1344/1343 [==============================] - 122s 91ms/step - loss: 0.0121\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96512\n","\n","Epoch 8/10\n","1344/1343 [==============================] - 122s 91ms/step - loss: 0.0092\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96476\n","\n","Epoch 9/10\n","1344/1343 [==============================] - 121s 90ms/step - loss: 0.0070\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96328\n","\n","Epoch 10/10\n","1344/1343 [==============================] - 121s 90ms/step - loss: 0.0052\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 27s 2ms/step\n","\n","Validation accuracy: 0.96312\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.callbacks.History at 0x7fce900d8090>"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"markdown","metadata":{"id":"sdyc1gASvpCa"},"source":["После 5-й эпохи значение Validation accuracy: 0.96687, что свидетельствует - использование LSTM еще улучшило точность."]},{"cell_type":"markdown","metadata":{"id":"OnRTsgmdv8HI"},"source":["**3. Последний эксперимент - задействуем Dropout.**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QO-B1MoUwJoo","executionInfo":{"status":"ok","timestamp":1621112913769,"user_tz":-420,"elapsed":1666001,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"75e9c710-1e74-4ad7-a736-6b94f3e030b9"},"source":["model_dout = keras.models.Sequential()\n","model_dout.add(L.InputLayer([None],dtype='int32'))\n","model_dout.add(L.Embedding(input_dim = len(all_words),\n","                      output_dim = 300,\n","                      weights = [embedding_weights],\n","                      trainable = True))\n","model_dout.add(L.Bidirectional(L.LSTM(64, \n","                                 return_sequences=True,\n","                                 dropout=0.2,\n","                                 recurrent_dropout=0.2)))\n","model_dout.add(L.TimeDistributed(L.Dense(len(all_tags),activation='softmax')))\n","\n","model_dout.compile('adam','categorical_crossentropy')\n","model_dout.fit_generator(generate_batches(train_data),len(train_data)/BATCH_SIZE,\n","                    callbacks=[EvaluateAccuracy()], epochs=10,)"],"execution_count":58,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","1344/1343 [==============================] - 141s 105ms/step - loss: 0.1351\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 30s 2ms/step\n","\n","Validation accuracy: 0.96056\n","\n","Epoch 2/10\n","1344/1343 [==============================] - 138s 103ms/step - loss: 0.0397\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 29s 2ms/step\n","\n","Validation accuracy: 0.96583\n","\n","Epoch 3/10\n","1344/1343 [==============================] - 139s 104ms/step - loss: 0.0331\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 29s 2ms/step\n","\n","Validation accuracy: 0.96744\n","\n","Epoch 4/10\n","1344/1343 [==============================] - 137s 102ms/step - loss: 0.0289\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 29s 2ms/step\n","\n","Validation accuracy: 0.96802\n","\n","Epoch 5/10\n","1344/1343 [==============================] - 139s 103ms/step - loss: 0.0256\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 29s 2ms/step\n","\n","Validation accuracy: 0.96865\n","\n","Epoch 6/10\n","1344/1343 [==============================] - 139s 103ms/step - loss: 0.0228\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 30s 2ms/step\n","\n","Validation accuracy: 0.96818\n","\n","Epoch 7/10\n","1344/1343 [==============================] - 138s 103ms/step - loss: 0.0203\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 30s 2ms/step\n","\n","Validation accuracy: 0.96832\n","\n","Epoch 8/10\n","1344/1343 [==============================] - 137s 102ms/step - loss: 0.0181\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 29s 2ms/step\n","\n","Validation accuracy: 0.96801\n","\n","Epoch 9/10\n","1344/1343 [==============================] - 127s 95ms/step - loss: 0.0161\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 29s 2ms/step\n","\n","Validation accuracy: 0.96775\n","\n","Epoch 10/10\n","1344/1343 [==============================] - 127s 95ms/step - loss: 0.0143\n","\n","Measuring validation accuracy...\n","14335/14335 [==============================] - 29s 2ms/step\n","\n","Validation accuracy: 0.96726\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.callbacks.History at 0x7fce9675e150>"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"eZpurAgM3JCM"},"source":["**Вывод:**\n","Совсем замечательная картина после использования Dropout, после 5-й эпохи Validation accuracy: 0.96865."]},{"cell_type":"code","metadata":{"id":"-COJN-ttAQnC","executionInfo":{"status":"ok","timestamp":1621115653974,"user_tz":-420,"elapsed":902,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["model_val=[0.96223, 0.96668, 0.96794, 0.96767, 0.96687, 0.96490, 0.96512, 0.96476, 0.96328, 0.96312]\n","model_dout_val=[0.96056, 0.96583, 0.96744, 0.96802, 0.96865, 0.96818, 0.96832, 0.96801, 0.96775, 0.96726]"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"6wB4V0H_kckt","executionInfo":{"status":"ok","timestamp":1621115671018,"user_tz":-420,"elapsed":1046,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}},"outputId":"35d952b3-1f18-4aee-d450-707935063684"},"source":["from matplotlib import pyplot as plt\n","\n","plt.plot(model_val)\n","plt.plot(model_dout_val)\n","plt.title('model val accuracy')\n","plt.ylabel('val accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['model LSTM', 'model LSTM + Dropout'], loc=\"lower right\")\n","plt.show()"],"execution_count":72,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"A_do6LrE-UMm"},"source":["На графике видно, как Dropout препятствует переобучению. На десяти эпохах модель с LSTM достигает максимума на валидационной выборке на второй эпохе, а затем  - несмотря на то, что на тесте точность постоянно возрастает (смотри логи обучения), точность на валидации довольно резко падает. Это свидетельствует о переобучении модели на train выборке.\n","\n","Тогда как введение Dropout способствует более сбалансированному обучению."]},{"cell_type":"code","metadata":{"id":"D6bKTZj9C3qD","executionInfo":{"status":"ok","timestamp":1621116075543,"user_tz":-420,"elapsed":927,"user":{"displayName":"Ivan Satura","photoUrl":"","userId":"17630606358964468039"}}},"source":["import pickle\n","pickle.dump(embedding_weights, open('emb_weigths.pkl', 'wb'),protocol=4)"],"execution_count":73,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RhiWdaH_5lWK"},"source":["#### Перевод"]},{"cell_type":"markdown","metadata":{"id":"b3agUtzc5Gx1"},"source":["Несколько советов\n","Вот еще несколько советов о том, как улучшить тренировку, которые немного сложнее реализовать. Мы настоятельно рекомендуем вам попробовать их _после__ того, как у вас будет хорошая начальная модель.\n","* __Используйте предварительно обученные вложения __: вы можете использовать предварительно обученные веса из [там] (http://ahogrammer.com/2017/01/20/the-list-of-pretrained-word-embeddings/), чтобы начать встраивание слой.\n","  * Встраиваемый слой имеет матрицу W (layer.W), которая содержит вложения слов для каждого слова в словаре. Вы можете просто перезаписать их с помощью tf.assign.\n","  * При использовании предварительно обученных эмбеддингов обратите внимание на то, что словарь модели отличается от вашего собственного.\n","  * Вы можете переключить trainable = False для встраивания слоя в первые несколько эпох, как при обычной тонкой настройке.\n","* __Войдите за пределы SimpleRNN__: есть `keras.layers.LSTM` и` keras.layers.GRU`\n","* Если вы хотите использовать настраиваемую повторяющуюся ячейку, прочтите [это] (https://keras.io/layers/recurrent/#rnn)\n","  * Вы также можете использовать одномерные свертки (`keras.layers.Conv1D`). Часто они не уступают повторяющимся слоям, но с меньшим количеством переобучений.\n","* __Складывайте больше слоев__: если у этого курса есть общий мотив, то он о наложении слоев\n","  * Вы можете просто добавить повторяющиеся слои и слои 1dconv друг на друга, и keras поймет это\n","  * Просто помните, что для более крупных сетей может потребоваться больше эпох для обучения\n","* __Regularization__: отсев можно применять как обычно, но также и специфичным для RNN способом.\n","  * `keras.layers.Dropout` работает между слоями RNN\n","  * Рекуррентные слои также имеют параметр recurrent_dropout\n","* __Gradient clipping__: Если ваше обучение не так стабильно, как хотелось бы, установите clipnorm в оптимизаторе.\n","  * Другими словами, рекомендуется следить за кривой потерь на каждой мини-партии. Попробуйте обратный вызов tenorboard или что-то подобное.\n","* __Word Dropout__: tl; dr случайным образом заменяет слова на UNK во время обучения.\n","  * Это также может имитировать увеличенное количество неизвестных слов в тестовом наборе\n","* __Больше словаря__: вы можете добиться большей производительности, расширив входной словарь вашей модели с 5000 до каждого отдельного слова!\n","  * Просто убедитесь, что ваша модель не переоснащается из-за такого количества параметров.\n","  * В сочетании с регуляризаторами или предварительно обученными векторами слов это может быть действительно хорошо, потому что сейчас наша модель слепа к> 5% слов.\n","* __Более эффективное пакетирование__: сейчас TF тратит много времени на итерацию по \"0\" сек.\n","  * Это происходит потому, что партия всегда дополняется до длины самого длинного предложения.\n","  * Вы можете ускорить процесс, предварительно сгенерировав пакеты одинаковой длины и загрузив их случайно выбранными предварительно созданными пакетами.\n","  * Это технически нарушает i.i.d. предположение, но это работает, если вы не придумаете какие-то безумные архитектуры rnn.\n","* __Самый главный совет__: не впихивайте все сразу!\n","  * Если вы добавите много модификаций, некоторые из них почти неизбежно будут вредными, и вы никогда не узнаете, какие из них.\n","  * Вместо этого попробуйте проводить небольшие итерации и записывать результаты экспериментов, чтобы направлять дальнейший поиск."]}]}